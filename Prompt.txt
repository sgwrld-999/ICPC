Heap summary for question solving:
    - When to use heap? 
        1. Repeatedly fetching smallest/largest element.
        2. Maintaining *k* smallest/largest elements.
        3. Implementing Priority Queues.
        4. Optimizing from **O(n log n)** sorting to **O(n log k)**.
    
    - Types of Heap:
        1. **Min Heap** – root is smallest, children larger.
        2. **Max Heap** – root is largest, children smaller.
        3. **Binary Heap** – implemented using arrays.
        4. **Other Heaps** – Fibonacci Heap, Binomial Heap (used in special algorithms like Dijkstra’s).

    - How to Identify the problem can be solved using with Heap:
        1. **Repeated sorting-like behavior**

            * The problem repeatedly asks for smallest/largest elements after updates.
            * Example: Continuously pick the next largest number in a sequence.

        2. **Find *k*-th smallest/largest (or min/max)**

            * Example: Find the 3rd largest score, smallest *k* elements, etc.

        3. **Optimization from O(n log n) → O(n log k)**

            * If you only need *k* items instead of all *n*, a heap reduces sorting overhead.
            * Example: Maintaining top *k* scores while reading a stream.

    - Patterns
        
        * 
    